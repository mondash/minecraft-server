#!/bin/bash

# The actual program name (name of the interface)
declare -r INAME="@INAME@"
declare -r GAME="@GAME@"

# Bolds text in the terminal using ANSI escape codes
bold() {
	echo -e "\e[39;1m$1\e[0m"
}

# General rule for the variable-naming-schema:
# Variables in capital letters may be passed through the command line others not.
# Avoid altering any of those later in the code since they may be readonly (IDLE_SERVER is an exception!)

# You may use this script for any game server of your choice, just alter the config file
[[ -n "$SERVER_ROOT" ]]  && declare -r SERVER_ROOT=$SERVER_ROOT   || SERVER_ROOT="@SERVER_ROOT@"
[[ -n "$BACKUP_DEST" ]]  && declare -r BACKUP_DEST=$BACKUP_DEST   || BACKUP_DEST="@BACKUP_DEST@"
[[ -n "$BACKUP_PATHS" ]] && declare -r BACKUP_PATHS=$BACKUP_PATHS || BACKUP_PATHS="@BACKUP_PATHS@"
[[ -n "$BACKUP_FLAGS" ]] && declare -r BACKUP_FLAGS=$BACKUP_FLAGS || BACKUP_FLAGS="@BACKUP_FLAGS@"
[[ -n "$KEEP_BACKUPS" ]] && declare -r KEEP_BACKUPS=$KEEP_BACKUPS || KEEP_BACKUPS="@KEEP_BACKUPS@"
[[ -n "$GAME_USER" ]]    && declare -r GAME_USER=$GAME_USER       || GAME_USER="@GAME_USER@"
[[ -n "$MAIN_EXECUTABLE" ]] && declare -r MAIN_EXECUTABLE=$MAIN_EXECUTABLE || MAIN_EXECUTABLE="@MAIN_EXECUTABLE@"
[[ -n "$SESSION_NAME" ]] && declare -r SESSION_NAME=$SESSION_NAME || SESSION_NAME="@SESSION_NAME@"

# Command and parameter declaration with which to start the server
[[ -n "$SERVER_START_CMD" ]] && declare -r SERVER_START_CMD=$SERVER_START_CMD || SERVER_START_CMD="@SERVER_START_CMD@"
[[ -n "$SERVER_START_SUCCESS" ]] && declare -r SERVER_START_SUCCESS=$SERVER_START_SUCCESS || SERVER_START_SUCCESS="@SERVER_START_SUCCESS@"

# System parameters for the control script
[[ -n "$IDLE_SERVER" ]]       && tmp_IDLE_SERVER=$IDLE_SERVER   || IDLE_SERVER="@IDLE_SERVER@"
[[ -n "$IDLE_SESSION_NAME" ]] && declare -r IDLE_SESSION_NAME=$IDLE_SESSION_NAME || IDLE_SESSION_NAME="@IDLE_SESSION_NAME@"
[[ -n "$GAME_PORT" ]]         && declare -r GAME_PORT=$GAME_PORT       || GAME_PORT="@GAME_PORT@"
[[ -n "$CHECK_PLAYER_TIME" ]] && declare -r CHECK_PLAYER_TIME=$CHECK_PLAYER_TIME || CHECK_PLAYER_TIME="@CHECK_PLAYER_TIME@"
[[ -n "$IDLE_IF_TIME" ]]      && declare -r IDLE_IF_TIME=$IDLE_IF_TIME || IDLE_IF_TIME="@IDLE_IF_TIME@"

# Additional configuration options which only few may need to alter
[[ -n "$GAME_COMMAND_DUMP" ]] && declare -r GAME_COMMAND_DUMP=$GAME_COMMAND_DUMP || GAME_COMMAND_DUMP="@GAME_COMMAND_DUMP@"
[[ -n "$MAX_SERVER_START_TIME" ]] && declare -r MAX_SERVER_START_TIME=$MAX_SERVER_START_TIME || MAX_SERVER_START_TIME="@MAX_SERVER_START_TIME@"
[[ -n "$MAX_SERVER_STOP_TIME" ]] && declare -r MAX_SERVER_STOP_TIME=$MAX_SERVER_STOP_TIME || MAX_SERVER_STOP_TIME="@MAX_SERVER_STOP_TIME@"

# Variables passed over the command line will always override the one from a config file
source /etc/conf.d/"@GAME@" 2>/dev/null || >&2 echo "Could not source /etc/conf.d/@GAME@"

# Preserve the content of IDLE_SERVER without making it readonly
[[ -n $tmp_IDLE_SERVER ]] && IDLE_SERVER=$tmp_IDLE_SERVER


# Strictly disallow uninitialized Variables
set -u
# Exit if a single command breaks and its failure is not handled accordingly
set -e

# Check whether sudo is needed at all
if [[ "$(whoami)" == "$GAME_USER" ]]; then
	SUDO_CMD=()
else
	SUDO_CMD=("sudo" "-u" "$GAME_USER")
fi

sudo_cmd() {
	"${SUDO_CMD[@]}" "$@"
}

# Check for sudo rigths
if [[ "$(sudo_cmd whoami)" != "$GAME_USER" ]]; then
	>&2 echo "You have $(bold "no permission") to run commands as $GAME_USER user."
	exit 21
fi

# Choose which flavor of netcat is to be used
if command -v netcat &> /dev/null; then
	NETCAT_CMD=("netcat")
elif command -v ncat &> /dev/null; then
	NETCAT_CMD=("ncat")
else
	NETCAT_CMD=()
fi


# Invoke commands with the tmux socket
tmux_socket() {
	sudo_cmd tmux -L "$SESSION_NAME" "$@"
}

# Pipe any given argument to the game server console,
# sleep for $sleep_time and return its output if $return_stdout is set
game_command() {
	tmux_socket wait-for -L "command_lock"
	if [[ -z "${return_stdout:-}" ]]; then
		tmux_socket send-keys -t "$SESSION_NAME":0.0 "$*" Enter
	else
		tmux_socket pipe-pane -t "$SESSION_NAME":0.0 "cat > $GAME_COMMAND_DUMP"
		tmux_socket send-keys -t "$SESSION_NAME":0.0 "$*" Enter
		sleep "${sleep_time:-0.3}"
		tmux_socket pipe-pane -t "$SESSION_NAME":0.0
		sudo_cmd cat "$GAME_COMMAND_DUMP"
	fi
	tmux_socket wait-for -U "command_lock"
}

# Check whether there are player on the server through list
is_player_online() {
	response="$(sleep_time=0.6 return_stdout=true game_command list)"
	# Delete leading line and fancy characters from free response string
	response="$(echo "$response" | sed -r -e 's/\x1B\[([0-9]{1,2}(;[0-9]{1,2})*)?[JKmsuG]//g')"
	# The list command prints a line containing the usernames after the last occurrence of ": "
	# and since playernames may not contain this string the clean player-list can easily be retrieved.
	# Otherwise check the first digit after the last occurrence of "There are". If it is 0 then there
	# are no players on the server. Should this test fail as well. Assume that a player is online.
	if [[ $(echo "$response" | sed -n -r -e 's/.*\: ?//p' | tr -d '\n' | wc -c) -le 1 ]]; then
		# No player is online
		return 1
	elif [[ "x$(echo "$response" | sed -n -r -e 's/.*there are[^0-9+]*([0-9]+).*$/\1/ip' | tr -d '\n')" == "x0" ]]; then
		# No player is online
		return 1
	else
		# A player is online (or it could not be determined)
		return 0
	fi
}

# Check whether the server is visited by a player otherwise shut it down
idle_server_daemon() {
	# This function is run within a tmux session of the GAME_USER therefore SUDO_CMD can be omitted
	if [[ "$(whoami)" != "$GAME_USER" ]]; then
		>&2 echo "Somehow this hidden function was not executed by the $GAME_USER user."
		>&2 echo "This should not have happend. Are you messing around with this script? :P"
		exit 22
	fi

	# Time in seconds for which no player was on the server
	no_player=0

	while true; do
		printf "no_player: %10ss  check_player_time: %10ss  idle_if_time: %10ss\n" "$no_player" "$CHECK_PLAYER_TIME" "$IDLE_IF_TIME"
		# Retry in $CHECK_PLAYER_TIME seconds
		sleep "$CHECK_PLAYER_TIME"

		if has_session; then
			# Game server is up and running
			# Check for active player
			if [[ -n "$(tmux_socket list-clients -t "$SESSION_NAME":0.0 2> /dev/null)" ]]; then
				# An administrator is connected to the console, pause player checking
				echo "An admin is connected to the console. Pause player checking."
			elif is_player_online; then
				# Reset timer since there is an active player on the server
				no_player=0
			else
				# No player was seen on the server through list
				no_player=$(( no_player + CHECK_PLAYER_TIME ))
				# Stop the game server if no player was active for at least $IDLE_IF_TIME
				if [[ "$no_player" -ge "$IDLE_IF_TIME" ]]; then
					IDLE_SERVER="false" $INAME stop
					# Wait for game server to go down
					for i in {1..100}; do
						has_session || break
						[[ $i -eq 100 ]] && echo "An $(bold "error") occurred while trying to reset the idle_server!"
						sleep 0.1
					done
					# Reset timer and give the player 300 seconds to connect after pinging
					no_player=$(( IDLE_IF_TIME - 300 ))
					# Game server is down, listen on port $GAME_PORT for incoming connections
					echo -n "Netcat: "
					"${NETCAT_CMD[@]}" -v -l -p "$GAME_PORT" 2>&1 | (grep -m1 -i "connect" && pkill -P $$ "${NETCAT_CMD[@]}") || true
					echo "Netcat caught a connection. The server is coming up again..."
					IDLE_SERVER="false" $INAME start
				fi
			fi
		else
			# Reset timer and give the player 300 seconds to connect after pinging
			no_player=$(( IDLE_IF_TIME - 300 ))
			# Game server is down, listen on port $GAME_PORT for incoming connections
			echo -n "Netcat: "
			"${NETCAT_CMD[@]}" -v -l -p "$GAME_PORT" 2>&1 | (grep -m1 -i "connect" && pkill -P $$ "${NETCAT_CMD[@]}") || true
			echo "Netcat caught a connection. The server is coming up again..."
			IDLE_SERVER="false" $INAME start
		fi
	done
}

# Start the server if it is not already running
server_start() {
	# Start the game server
	if has_session; then
		echo "A tmux $SESSION_NAME session is already running. Please close it first."
	else
		echo -n "Starting server... "
		sudo_cmd rm -f "$GAME_COMMAND_DUMP"
		# Use a plain file as command buffers for the server startup and switch to a FIFO pipe later
		sudo_cmd touch "$GAME_COMMAND_DUMP"
		# Ensure pipe-pine is started before the server itself by splitting the session creation and server startup
		tmux_socket new-session -s "$SESSION_NAME" -c "$SERVER_ROOT" -d /bin/bash
		# Mimic GNU screen and allow for both C-a and C-b as prefix
		tmux_socket set -g prefix2 C-a
		tmux_socket wait-for -L "command_lock"
		tmux_socket pipe-pane -t "$SESSION_NAME":0.0 "cat > $GAME_COMMAND_DUMP"
		tmux_socket send-keys -t "$SESSION_NAME":0.0 "exec $SERVER_START_CMD" Enter
		for ((i=1; i<=MAX_SERVER_START_TIME; i++)); do
			sleep "${sleep_time:-0.1}"
			if ! session_is_alive; then
				echo -e "$(bold "failed")\n"
				>&2 sudo_cmd cat "$GAME_COMMAND_DUMP"
				sudo_cmd rm -f "$GAME_COMMAND_DUMP"
				# Session is dead but remain-on-exit left it open; close it for sure
				tmux_socket kill-session -t "$SESSION_NAME"
				exit 1
			elif sudo_cmd grep -q -i "$SERVER_START_SUCCESS" "$GAME_COMMAND_DUMP"; then
				bold "done"
				break
			elif [[ $i -eq $MAX_SERVER_START_TIME ]]; then
				bold "skipping"
				>&2 echo "Server startup has not finished yet; continuing anyways"
			fi
		done
		tmux_socket pipe-pane -t "$SESSION_NAME":0.0
		# Let the command buffer be a FIFO pipe
		sudo_cmd rm -f "$GAME_COMMAND_DUMP"
		sudo_cmd mkfifo "$GAME_COMMAND_DUMP"
		tmux_socket wait-for -U "command_lock"
	fi

	if [[ "${IDLE_SERVER,,}" == "true" ]]; then
		# Check for the availability of the netcat (nc) binaries
		if [[ -z "${NETCAT_CMD[*]}" ]]; then
			>&2 echo "The netcat binaries are needed for suspending an idle server."
			exit 12
		fi

		# Start the idle server daemon
		if has_idle_session; then
			tmux_socket kill-session -t "$IDLE_SESSION_NAME"
			# Restart as soon as the idle_server_daemon has shut down completely
			for i in {1..100}; do
				sleep 0.1
				if ! has_idle_session; then
					tmux_socket new-session -s "$IDLE_SESSION_NAME" -d "$INAME idle_server_daemon"
					break
				fi
				[[ $i -eq 100 ]] && echo "An $(bold "error") occurred while trying to reset the idle_server!"
			done
		else
			echo -n "Starting idle server daemon... "
			tmux_socket new-session -s "$IDLE_SESSION_NAME" -d "$INAME idle_server_daemon"
			bold "done"
		fi
	fi
}

# Stop the server gracefully by saving everything prior and warning the users
server_stop() {
	# Quit the idle daemon
	if [[ "${IDLE_SERVER,,}" == "true" ]]; then
		# Check for the availability of the netcat (nc) binaries
		if [[ -z "${NETCAT_CMD[*]}" ]]; then
			>&2 echo "The netcat binaries are needed for suspending an idle server."
			exit 12
		fi

		if has_idle_session; then
			echo -n "Stopping idle server daemon... "
			tmux_socket kill-session -t "$IDLE_SESSION_NAME"
			bold "done"
		else
			echo "The corresponding tmux session for $IDLE_SESSION_NAME was already dead."
		fi
	fi

	# Gracefully exit the game server
	if has_session; then
		# Game server is up and running, gracefully stop the server when there are still active players

		# Check for active player
		if is_player_online; then
			# Player(s) were seen on the server through list (or an error occurred)
			# Warning the users through the server console
			game_command say "Server is going down in 10 seconds! HURRY UP WITH WHATEVER YOU ARE DOING!"
			game_command save-all
			echo -n "Server is going down in..."
			for i in {1..10}; do
				game_command say "down in... $(( 10 - i ))"
				echo -n " $(( 10 - i ))"
				sleep 1
			done
		else
			# No player was seen on the server through list
			echo -n "Server is going down... "
		fi

		game_command stop

		# Finish as soon as the server has shut down completely
		for ((i=1; i<=MAX_SERVER_STOP_TIME; i++)); do
			if ! has_session; then
				sudo_cmd rm -f "$GAME_COMMAND_DUMP"
				bold "done"
				break
			fi
			[[ $i -eq $MAX_SERVER_STOP_TIME ]] && bold "timed out"
			sleep 0.1
		done
	else
		echo "The corresponding tmux session for $SESSION_NAME was already dead."
	fi
}

# Print whether the server is running and if so give some information about memory usage and threads
server_status() {
	# Print status information about the idle daemon
	if [[ "${IDLE_SERVER,,}" == "true" ]]; then
		# Check for the availability of the netcat (nc) binaries
		if [[ -z "${NETCAT_CMD[*]}" ]]; then
			>&2 echo "The netcat binaries are needed for suspending an idle server."
			exit 12
		fi

		if has_idle_session; then
			echo "Idle server daemon status: $(bold "running")"
		else
			echo "Idle server daemon status: $(bold "stopped")"
		fi
	fi

	# Print status information for the game server
	if has_session; then
		echo "Status: $(bold "running")"

		# Calculating memory usage
		for p in $(sudo_cmd pgrep -f "$MAIN_EXECUTABLE"); do
			ps -p"$p" -O rss | tail -n 1;
		done | awk '{ count ++; sum += $2 }; END {count --; print "Number of processes =", count, "(tmux +", count, "x server)"; print "Total memory usage =", sum/1024, "MB" ;};'
	else
		echo "Status: $(bold "stopped")"
	fi
}

# Restart the complete server by shutting it down and starting it again
server_restart() {
	if has_session; then
		server_stop
		server_start
	else
		server_start
	fi
}

# Backup the directories specified in BACKUP_PATHS
backup_files() {
	# Check for the availability of the tar binaries
	if ! command -v tar &> /dev/null; then
		>&2 echo "The tar binaries are needed for a backup."
		exit 11
	fi

	echo "Starting backup..."
	fname="$(date +%Y_%m_%d_%H.%M.%S).tar.gz"
	sudo_cmd mkdir -p "$BACKUP_DEST"
	if has_session; then
		game_command save-off
		game_command save-all
		sleep "${sleep_time:-0.3}"
		sync && wait
		sudo_cmd tar -C "$SERVER_ROOT" -cf "$BACKUP_DEST/$fname" $BACKUP_PATHS --totals $BACKUP_FLAGS 2>&1 | grep -v "tar: Removing leading "
		game_command save-on
	else
		sudo_cmd tar -C "$SERVER_ROOT" -cf "$BACKUP_DEST/$fname" $BACKUP_PATHS --totals $BACKUP_FLAGS 2>&1 | grep -v "tar: Removing leading "
	fi
	echo -e "$(bold "backup completed")\n"

	echo -n "Only keeping the last $KEEP_BACKUPS backups and removing the other ones... "
	backup_count=$(for f in "$BACKUP_DEST"/[0-9_.]*; do echo "$f"; done | wc -l)
	if [[ $(( backup_count - KEEP_BACKUPS )) -gt 0 ]]; then
		for old_backup in $(for f in "$BACKUP_DEST"/[0-9_.]*; do echo "$f"; done | head -n"$(( backup_count - KEEP_BACKUPS ))"); do
			sudo_cmd rm "$old_backup";
		done
		echo "$(bold "done") ($(( backup_count - KEEP_BACKUPS)) backup(s) pruned)"
	else
		echo "$(bold  "done") (no backups pruned)"
	fi
}

# Restore backup
backup_restore() {
	# Check for the availability of the tar binaries
	if ! command -v tar &> /dev/null; then
		>&2 echo "The tar binaries are needed for a backup."
		exit 11
	fi

	# Only allow the user to restore a backup if the server is down
	if has_session; then
		>&2 echo "The $(bold "server should be down") in order to restore the world data."
		exit 3
	fi

	# Either let the user choose a backup or expect one as an argument
	if [[ $# -lt 1 ]]; then
		echo "Please enter the corresponding number for the backup to be restored: "
		i=1
		for f in "$BACKUP_DEST"/[0-9_.]*; do
			echo -e "    $(bold "$i")\t$f"
			i=$(( i + 1 ))
		done
		echo -n "Restore backup number: "

		# Read in user input
		read -r user_choice

		# Interpeting the input
		if [[ $user_choice =~ ^-?[0-9]+$ ]]; then
			n=1
			for f in "$BACKUP_DEST"/[0-9_.]*; do
				[[ $n -eq $user_choice ]] && fname="$f"
				n=$(( n + 1 ))
			done
			if [[ -z $fname ]]; then
				>&2 echo "$(bold "Failed") to interpret your input. Please enter the digit of the presented options."
				exit 5
			fi
		else
			>&2 echo "$(bold "Failed") to interpret your input. Please enter a valid digit for one of the presented options."
			exit 6
		fi
	elif [[ $# -eq 1 ]]; then
		# Check for the existance of the specified file
		if [[ -f "$1" ]]; then
			fname="$1"
		else
			if [[ -f "$BACKUP_DEST"/"$1" ]]; then
				fname="$BACKUP_DEST"/"$1"
			else
				>&2 echo "Sorry, but '$1', is $(bold "not a valid file"), neither in your current directory nor in the backup folder."
				exit 4
			fi
		fi
	elif [[ $# -gt 1 ]]; then
		>&2 echo "$(bold "Too many arguments.") Please pass only the filename for the world data as an argument."
		>&2 echo "Or alternatively, no arguments at all to choose from a list of available backups."
		exit 7
	fi

	echo "Restoring backup..."
	if sudo_cmd tar -xf "$fname" -C "$SERVER_ROOT" 2>&1; then
		bold "Restoration completed"
	else
		bold "Failed to restore backup."
	fi
}

# Run the given command at the game server console
server_command() {
	if [[ $# -lt 1 ]]; then
		>&2 echo "No server command specified. Try 'help' for a list of commands."
		exit 1
	fi

	if has_session; then
		return_stdout=true game_command "$@"
	else
		echo "There is no $SESSION_NAME session to connect to."
	fi
}

# Enter the tmux game session
server_console() {
	if has_session; then
		tmux_socket attach -t "$SESSION_NAME":0.0
	else
		echo "There is no $SESSION_NAME session to connect to."
	fi
}

# Check if there is a session available
socket_has_session() {
	tmux_socket has-session -t "$1":0.0 2> /dev/null
}

has_session() {
	socket_has_session "$SESSION_NAME"
}

has_idle_session() {
	socket_has_session "$IDLE_SESSION_NAME"
}

session_is_alive() {
	has_session && tmux_socket list-panes -t "$SESSION_NAME":0.0 -F '#{pane_dead}' 2> /dev/null
}

# Help function, no arguments required
help() {
	cat <<-EOF
	This script was designed to easily control any $GAME server. Almost any parameter for a given
	$GAME server derivative can be changed by editing the variables in the configuration file.

	Usage: $INAME {start|stop|restart|status|backup|restore|command <command>|console}
	    start                Start the $GAME server
	    stop                 Stop the $GAME server
	    restart              Restart the $GAME server
	    status               Print some status information
	    backup               Backup the world data
	    restore [filename]   Restore the world data from a backup
	    command <command>    Run the given command at the $GAME server console
	    console              Enter the server console through a tmux session

	Copyright (c) Gordian Edenhofer <gordian.edenhofer@gmail.com>
	EOF
}

case "${1:-}" in
	start)
	server_start
	;;

	stop)
	server_stop
	;;

	status)
	server_status
	;;

	restart)
	server_restart
	;;

	console)
	server_console
	;;

	command)
	server_command "${@:2}"
	;;

	backup)
	backup_files
	;;

	restore)
	backup_restore "${@:2}"
	;;

	idle_server_daemon)
	# This shall be a hidden function which should only be invoked internally
	idle_server_daemon
	;;

	-h|--help)
	help
	exit 0
	;;

	*)
	help
	exit 1
	;;
esac

exit 0
